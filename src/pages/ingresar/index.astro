---
import Layout from "../../layouts/Layout.astro";
import Form from "../../components/pages/ingresar/form/index.tsx";
import { ingresarMeta } from "@/config/meta";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
  return redirect("/admin");
}
---

<Layout
  title={ingresarMeta.title}
  headerTransparent={ingresarMeta.headerTransparent}
>
  <section
    class="grid place-items-center md:grid-cols-2 grid-rows-[100vh] overflow-hidden"
  >
    <div class="w-full h-full px-8 py-24 flex items-center justify-center">
      <Form client:load />
    </div>
    <div class="w-full h-full relative hidden md:block">
      <img
        src="https://labase.pe/src/assets/images/spaces/recepcion.webp"
        alt="image"
        class="object-cover w-full h-full"
      />
    </div>
  </section>
</Layout>

<script>
  import { authService } from "../../services/authService";

  const form = document.getElementById("loginForm") as HTMLFormElement | null;
  const errorMessage = document.getElementById(
    "errorMessage"
  ) as HTMLDivElement | null;
  const togglePassword = document.getElementById(
    "togglePassword"
  ) as HTMLButtonElement | null;
  const passwordInput = document.getElementById(
    "password"
  ) as HTMLInputElement | null;

  /**
   * @description Cambia la visibilidad de la contraseña al hacer clic en el icono.
   * Actualiza el atributo 'type' del input de contraseña y el icono del botón.
   */
  togglePassword?.addEventListener("click", () => {
    const type =
      passwordInput?.getAttribute("type") === "password" ? "text" : "password";
    passwordInput?.setAttribute("type", type);

    // Cambia el icono
    if (type === "text") {
      togglePassword.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
        <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
      </svg>`;
    } else {
      togglePassword.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
      </svg>`;
    }
  });

  // Nota: El manejo del formulario se realiza en el componente LoginForm.astro
  // No es necesario duplicar la lógica aquí

  // Verificar si hay una redirección pendiente después de la autenticación
  document.addEventListener("DOMContentLoaded", async () => {
    // Verificar si hay un indicador de autenticación exitosa en sessionStorage
    const authSuccess = sessionStorage.getItem("auth_success");
    const redirectTo = sessionStorage.getItem("redirect_to");

    if (authSuccess === "true" && redirectTo) {
      // Limpiar el indicador para evitar bucles de redirección
      sessionStorage.removeItem("auth_success");
      sessionStorage.removeItem("redirect_to");

      // Verificar si el usuario está autenticado
      const isAuthenticated = await authService.isAuthenticated();

      if (isAuthenticated) {
        window.location.href = redirectTo;
      }
    }
  });
</script>
